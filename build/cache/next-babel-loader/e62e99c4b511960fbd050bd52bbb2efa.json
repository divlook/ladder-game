{"ast":null,"code":"import * as LogRocket from 'logrocket';\nimport setupLogRocketReact from 'logrocket-react';\nimport { NODE_ENV, LADDER_VERSION, LOGROCKET_ID, USING_SENTRY, USING_LOGROCKET } from '~/lib/constants';\nexport const initLogRocket = () => {\n  if (USING_LOGROCKET) {\n    LogRocket.init(LOGROCKET_ID, {\n      release: `${NODE_ENV}@${LADDER_VERSION}`\n    });\n    setupLogRocketReact(LogRocket);\n  }\n\n  return {\n    withSentry\n  };\n};\nexport const withSentry = Sentry => {\n  if (USING_LOGROCKET && USING_SENTRY) {\n    LogRocket.getSessionURL(sessionURL => {\n      Sentry.configureScope(scope => {\n        scope.setExtra('sessionURL', sessionURL);\n      });\n    });\n  }\n};","map":{"version":3,"sources":["/Users/chad/_workspace/ladder-game/plugins/logrocket.ts"],"names":["LogRocket","setupLogRocketReact","NODE_ENV","LADDER_VERSION","LOGROCKET_ID","USING_SENTRY","USING_LOGROCKET","initLogRocket","init","release","withSentry","Sentry","getSessionURL","sessionURL","configureScope","scope","setExtra"],"mappings":"AAAA,OAAO,KAAKA,SAAZ,MAA2B,WAA3B;AACA,OAAOC,mBAAP,MAAgC,iBAAhC;AACA,SAASC,QAAT,EAAmBC,cAAnB,EAAmCC,YAAnC,EAAiDC,YAAjD,EAA+DC,eAA/D,QAAsF,iBAAtF;AAEA,OAAO,MAAMC,aAAa,GAAG,MAAM;AAC/B,MAAID,eAAJ,EAAqB;AACjBN,IAAAA,SAAS,CAACQ,IAAV,CAAeJ,YAAf,EAA6B;AACzBK,MAAAA,OAAO,EAAG,GAAEP,QAAS,IAAGC,cAAe;AADd,KAA7B;AAGAF,IAAAA,mBAAmB,CAACD,SAAD,CAAnB;AACH;;AACD,SAAO;AACHU,IAAAA;AADG,GAAP;AAGH,CAVM;AAYP,OAAO,MAAMA,UAAU,GAAGC,MAAM,IAAI;AAChC,MAAIL,eAAe,IAAID,YAAvB,EAAqC;AACjCL,IAAAA,SAAS,CAACY,aAAV,CAAwBC,UAAU,IAAI;AAClCF,MAAAA,MAAM,CAACG,cAAP,CAAsBC,KAAK,IAAI;AAC3BA,QAAAA,KAAK,CAACC,QAAN,CAAe,YAAf,EAA6BH,UAA7B;AACH,OAFD;AAGH,KAJD;AAKH;AACJ,CARM","sourcesContent":["import * as LogRocket from 'logrocket'\nimport setupLogRocketReact from 'logrocket-react'\nimport { NODE_ENV, LADDER_VERSION, LOGROCKET_ID, USING_SENTRY, USING_LOGROCKET } from '~/lib/constants'\n\nexport const initLogRocket = () => {\n    if (USING_LOGROCKET) {\n        LogRocket.init(LOGROCKET_ID, {\n            release: `${NODE_ENV}@${LADDER_VERSION}`,\n        })\n        setupLogRocketReact(LogRocket)\n    }\n    return {\n        withSentry,\n    }\n}\n\nexport const withSentry = Sentry => {\n    if (USING_LOGROCKET && USING_SENTRY) {\n        LogRocket.getSessionURL(sessionURL => {\n            Sentry.configureScope(scope => {\n                scope.setExtra('sessionURL', sessionURL)\n            })\n        })\n    }\n}\n"]},"metadata":{},"sourceType":"module"}