{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { useState, useEffect } from 'react'; // TODO:\n// activated\n// deactivated\n// nextTick\n\nvar Color;\n\n(function (Color) {\n  Color[\"PersianGreen\"] = \"#009688\";\n})(Color || (Color = {}));\n\nvar HookNames;\n\n(function (HookNames) {\n  HookNames[\"created\"] = \"useCreated\";\n  HookNames[\"mounted\"] = \"useMounted\";\n  HookNames[\"updated\"] = \"useUpdated\";\n  HookNames[\"beforeDestroy\"] = \"useBeforeDestroy\";\n})(HookNames || (HookNames = {}));\n\nconst initialState = {\n  created: false,\n  mounted: false,\n  updated: false\n};\n\nconst prevState = _objectSpread({}, initialState); // init에서 변형됨\n\n\nconst callbacks = {\n  created: [],\n  mounted: [],\n  updated: [],\n  beforeDestroy: []\n}; // init에서 변형됨\n\nconst hooks = {\n  useCreated: cb => void cb,\n  useMounted: cb => void cb,\n  useUpdated: cb => void cb,\n  useBeforeDestroy: cb => void cb\n}; // init에서 변형됨\n\nconst run = {\n  created: cb => void cb,\n  mounted: cb => void cb,\n  updated: cb => void cb,\n  beforeDestroy: cb => void cb\n};\n\nconst init = opt => {\n  const hasArg = opt && typeof opt === 'object';\n\n  for (const lifecycleName in HookNames) {\n    const hookName = HookNames[lifecycleName]; // callback 초기화\n\n    callbacks[lifecycleName] = []; // 인수가 있으면 callback에 추가\n\n    if (hasArg && typeof opt[lifecycleName] === 'function') {\n      var _callbacks$lifecycleN, _callbacks$lifecycleN2;\n\n      (_callbacks$lifecycleN = callbacks[lifecycleName]) === null || _callbacks$lifecycleN === void 0 ? void 0 : (_callbacks$lifecycleN2 = _callbacks$lifecycleN.push) === null || _callbacks$lifecycleN2 === void 0 ? void 0 : _callbacks$lifecycleN2.call(_callbacks$lifecycleN, opt[lifecycleName]);\n    } // hook을 부를때마다 callback에 추가됨\n\n\n    hooks[hookName] = cb => {\n      var _callbacks$lifecycleN3, _callbacks$lifecycleN4;\n\n      return void ((_callbacks$lifecycleN3 = callbacks[lifecycleName]) === null || _callbacks$lifecycleN3 === void 0 ? void 0 : (_callbacks$lifecycleN4 = _callbacks$lifecycleN3.push) === null || _callbacks$lifecycleN4 === void 0 ? void 0 : _callbacks$lifecycleN4.call(_callbacks$lifecycleN3, cb));\n    }; // callback 실행시키는 함수\n\n\n    run[lifecycleName] = () => {\n      var _callbacks$lifecycleN5, _callbacks$lifecycleN6;\n\n      return (_callbacks$lifecycleN5 = callbacks[lifecycleName]) === null || _callbacks$lifecycleN5 === void 0 ? void 0 : (_callbacks$lifecycleN6 = _callbacks$lifecycleN5.forEach) === null || _callbacks$lifecycleN6 === void 0 ? void 0 : _callbacks$lifecycleN6.call(_callbacks$lifecycleN5, cb => cb === null || cb === void 0 ? void 0 : cb());\n    };\n  }\n};\n\nexport const useLifecycle = opt => {\n  init(opt);\n  const {\n    0: state,\n    1: setState\n  } = useState(initialState);\n  /**\n   * beforeCreate\n   */\n\n  if (!state.created) {\n    setState(_objectSpread({}, state, {\n      created: true\n    }));\n  }\n  /**\n   * created\n   */\n\n\n  useEffect(() => {\n    if (state.created) {\n      var _run$created;\n\n      (opt === null || opt === void 0 ? void 0 : opt.useLog) && console.group(`%c: Created`, `color: ${Color.PersianGreen}`, (opt === null || opt === void 0 ? void 0 : opt.logLabel) || '');\n      (_run$created = run.created) === null || _run$created === void 0 ? void 0 : _run$created.call(run);\n      (opt === null || opt === void 0 ? void 0 : opt.useLog) && console.groupEnd();\n\n      if (!state.mounted) {\n        setState(_objectSpread({}, state, {\n          mounted: true\n        }));\n      }\n    }\n\n    prevState.created = state.created;\n  }, [state.created]);\n  /**\n   * mounted\n   */\n\n  useEffect(() => {\n    if (state.mounted) {\n      var _run$mounted;\n\n      (opt === null || opt === void 0 ? void 0 : opt.useLog) && console.group(`%c: Mounted`, `color: ${Color.PersianGreen}`, (opt === null || opt === void 0 ? void 0 : opt.logLabel) || '');\n      (_run$mounted = run.mounted) === null || _run$mounted === void 0 ? void 0 : _run$mounted.call(run);\n      (opt === null || opt === void 0 ? void 0 : opt.useLog) && console.groupEnd();\n\n      if (!state.updated) {\n        setState(_objectSpread({}, state, {\n          updated: true\n        }));\n      }\n    }\n\n    prevState.mounted = state.mounted;\n  }, [state.mounted]);\n  /**\n   * updated\n   */\n\n  useEffect(() => {\n    const {\n      created,\n      mounted,\n      updated\n    } = state;\n\n    if (created && mounted && updated) {\n      if (prevState.updated) {\n        var _run$updated;\n\n        (opt === null || opt === void 0 ? void 0 : opt.useLog) && console.group(`%c: Updated`, `color: ${Color.PersianGreen}`, (opt === null || opt === void 0 ? void 0 : opt.logLabel) || '');\n        (_run$updated = run.updated) === null || _run$updated === void 0 ? void 0 : _run$updated.call(run);\n        (opt === null || opt === void 0 ? void 0 : opt.useLog) && console.groupEnd();\n      }\n\n      prevState.updated = true;\n    }\n  });\n  /**\n   * beforeDestroy\n   */\n\n  useEffect(() => {\n    return () => {\n      if (state.mounted) {\n        var _run$beforeDestroy;\n\n        state.created = false;\n        state.mounted = false;\n        state.updated = false;\n        (opt === null || opt === void 0 ? void 0 : opt.useLog) && console.group(`%c: beforeDestroy`, `color: ${Color.PersianGreen}`, (opt === null || opt === void 0 ? void 0 : opt.logLabel) || '');\n        (_run$beforeDestroy = run.beforeDestroy) === null || _run$beforeDestroy === void 0 ? void 0 : _run$beforeDestroy.call(run);\n        (opt === null || opt === void 0 ? void 0 : opt.useLog) && console.groupEnd();\n        prevState.created = false;\n        prevState.mounted = false;\n        prevState.updated = false;\n      }\n    };\n  }, [state.mounted]);\n  return _objectSpread({}, state, {}, hooks);\n};\nexport default useLifecycle;","map":null,"metadata":{},"sourceType":"module"}