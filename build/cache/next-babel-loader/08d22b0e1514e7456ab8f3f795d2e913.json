{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { Fragment, useCallback } from 'react';\nimport { GA_ID, USING_GA } from '~/lib/constants';\nlet definedDataLayer = false;\nlet definedGtag = false;\nexport const gtag = (...args) => {\n  if (USING_GA) {\n    if (definedDataLayer === false) {\n      definedDataLayer = true;\n\n      if (Array.isArray(window['dataLayer']) === false) {\n        window['dataLayer'] = window['dataLayer'] || [];\n      }\n    }\n\n    if (definedGtag === false) {\n      definedGtag = true;\n\n      if (typeof window['gtag'] !== 'function') {\n        window['gtag'] = (...args) => {\n          window['dataLayer'].push(...args);\n        };\n      }\n    }\n\n    window['gtag'](...args);\n  }\n};\nexport function trackPageView({\n  title,\n  location,\n  path\n} = {}) {\n  if (USING_GA) {\n    var _window, _window$document, _window2, _window2$location, _window3, _window3$location;\n\n    gtag('config', GA_ID, {\n      ['page_title']: title !== null && title !== void 0 ? title : (_window = window) === null || _window === void 0 ? void 0 : (_window$document = _window.document) === null || _window$document === void 0 ? void 0 : _window$document.title,\n      ['page_location']: location !== null && location !== void 0 ? location : (_window2 = window) === null || _window2 === void 0 ? void 0 : (_window2$location = _window2.location) === null || _window2$location === void 0 ? void 0 : _window2$location.href,\n      ['page_path']: path !== null && path !== void 0 ? path : (_window3 = window) === null || _window3 === void 0 ? void 0 : (_window3$location = _window3.location) === null || _window3$location === void 0 ? void 0 : _window3$location.pathname\n    });\n  }\n}\nexport const GoogleAnalytics = () => {\n  const setGoogleTags = useCallback(() => {\n    return {\n      __html: `\n                window.dataLayer = window.dataLayer || [];\n                function gtag(){dataLayer.push(arguments);}\n                gtag('js', new Date());\n                gtag('config', '${GA_ID}');\n            `\n    };\n  }, []);\n\n  if (USING_GA) {\n    return __jsx(Fragment, null, __jsx(\"script\", {\n      async: true,\n      src: `https://www.googletagmanager.com/gtag/js?id=${GA_ID}`\n    }), __jsx(\"script\", {\n      dangerouslySetInnerHTML: setGoogleTags()\n    }));\n  }\n\n  return null;\n};","map":{"version":3,"sources":["/Users/chad/_workspace/ladder-game/plugins/google-analytics.tsx"],"names":["React","Fragment","useCallback","GA_ID","USING_GA","definedDataLayer","definedGtag","gtag","args","Array","isArray","window","push","trackPageView","title","location","path","document","href","pathname","GoogleAnalytics","setGoogleTags","__html"],"mappings":";AAAA,OAAOA,KAAP,IAAoBC,QAApB,EAA8BC,WAA9B,QAAiD,OAAjD;AACA,SAASC,KAAT,EAAgBC,QAAhB,QAAgC,iBAAhC;AAEA,IAAIC,gBAAgB,GAAG,KAAvB;AACA,IAAIC,WAAW,GAAG,KAAlB;AAEA,OAAO,MAAMC,IAAI,GAAG,CAAC,GAAGC,IAAJ,KAAa;AAC7B,MAAIJ,QAAJ,EAAc;AACV,QAAIC,gBAAgB,KAAK,KAAzB,EAAgC;AAC5BA,MAAAA,gBAAgB,GAAG,IAAnB;;AACA,UAAII,KAAK,CAACC,OAAN,CAAcC,MAAM,CAAC,WAAD,CAApB,MAAuC,KAA3C,EAAkD;AAC9CA,QAAAA,MAAM,CAAC,WAAD,CAAN,GAAsBA,MAAM,CAAC,WAAD,CAAN,IAAuB,EAA7C;AACH;AACJ;;AAED,QAAIL,WAAW,KAAK,KAApB,EAA2B;AACvBA,MAAAA,WAAW,GAAG,IAAd;;AACA,UAAI,OAAOK,MAAM,CAAC,MAAD,CAAb,KAA0B,UAA9B,EAA0C;AACtCA,QAAAA,MAAM,CAAC,MAAD,CAAN,GAAiB,CAAC,GAAGH,IAAJ,KAAa;AAC1BG,UAAAA,MAAM,CAAC,WAAD,CAAN,CAAoBC,IAApB,CAAyB,GAAGJ,IAA5B;AACH,SAFD;AAGH;AACJ;;AAEDG,IAAAA,MAAM,CAAC,MAAD,CAAN,CAAe,GAAGH,IAAlB;AACH;AACJ,CApBM;AAsBP,OAAO,SAASK,aAAT,CAAuB;AAAEC,EAAAA,KAAF;AAASC,EAAAA,QAAT;AAAmBC,EAAAA;AAAnB,IAAkF,EAAzG,EAA6G;AAChH,MAAIZ,QAAJ,EAAc;AAAA;;AACVG,IAAAA,IAAI,CAAC,QAAD,EAAWJ,KAAX,EAAkB;AAClB,OAAC,YAAD,GAAgBW,KAAhB,aAAgBA,KAAhB,cAAgBA,KAAhB,cAAyBH,MAAzB,gEAAyB,QAAQM,QAAjC,qDAAyB,iBAAkBH,KADzB;AAElB,OAAC,eAAD,GAAmBC,QAAnB,aAAmBA,QAAnB,cAAmBA,QAAnB,eAA+BJ,MAA/B,kEAA+B,SAAQI,QAAvC,sDAA+B,kBAAkBG,IAF/B;AAGlB,OAAC,WAAD,GAAeF,IAAf,aAAeA,IAAf,cAAeA,IAAf,eAAuBL,MAAvB,kEAAuB,SAAQI,QAA/B,sDAAuB,kBAAkBI;AAHvB,KAAlB,CAAJ;AAKH;AACJ;AAED,OAAO,MAAMC,eAAmB,GAAG,MAAM;AACrC,QAAMC,aAAa,GAAGnB,WAAW,CAAC,MAAM;AACpC,WAAO;AACHoB,MAAAA,MAAM,EAAG;;;;kCAIanB,KAAM;;AALzB,KAAP;AAQH,GATgC,EAS9B,EAT8B,CAAjC;;AAWA,MAAIC,QAAJ,EAAc;AACV,WACI,MAAC,QAAD,QACI;AAAQ,MAAA,KAAK,MAAb;AAAc,MAAA,GAAG,EAAG,+CAA8CD,KAAM;AAAxE,MADJ,EAEI;AAAQ,MAAA,uBAAuB,EAAEkB,aAAa;AAA9C,MAFJ,CADJ;AAMH;;AAED,SAAO,IAAP;AACH,CAtBM","sourcesContent":["import React, { FC, Fragment, useCallback } from 'react'\nimport { GA_ID, USING_GA } from '~/lib/constants'\n\nlet definedDataLayer = false\nlet definedGtag = false\n\nexport const gtag = (...args) => {\n    if (USING_GA) {\n        if (definedDataLayer === false) {\n            definedDataLayer = true\n            if (Array.isArray(window['dataLayer']) === false) {\n                window['dataLayer'] = window['dataLayer'] || []\n            }\n        }\n\n        if (definedGtag === false) {\n            definedGtag = true\n            if (typeof window['gtag'] !== 'function') {\n                window['gtag'] = (...args) => {\n                    window['dataLayer'].push(...args)\n                }\n            }\n        }\n\n        window['gtag'](...args)\n    }\n}\n\nexport function trackPageView({ title, location, path }: { title?: string; location?: string; path?: string } = {}) {\n    if (USING_GA) {\n        gtag('config', GA_ID, {\n            ['page_title']: title ?? window?.document?.title,\n            ['page_location']: location ?? window?.location?.href,\n            ['page_path']: path ?? window?.location?.pathname,\n        })\n    }\n}\n\nexport const GoogleAnalytics: FC = () => {\n    const setGoogleTags = useCallback(() => {\n        return {\n            __html: `\n                window.dataLayer = window.dataLayer || [];\n                function gtag(){dataLayer.push(arguments);}\n                gtag('js', new Date());\n                gtag('config', '${GA_ID}');\n            `,\n        }\n    }, [])\n\n    if (USING_GA) {\n        return (\n            <Fragment>\n                <script async src={`https://www.googletagmanager.com/gtag/js?id=${GA_ID}`}></script>\n                <script dangerouslySetInnerHTML={setGoogleTags()} />\n            </Fragment>\n        )\n    }\n\n    return null\n}\n"]},"metadata":{},"sourceType":"module"}