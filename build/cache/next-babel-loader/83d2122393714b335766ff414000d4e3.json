{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport * as types from '~/reducers/index.type';\nexport const initialState = {\n  ladderQty: 0,\n  players: [],\n  rewards: []\n};\nexport default ((state, action) => {\n  switch (action.type) {\n    case types.CHANGE_REWARD:\n      {\n        const {\n          index,\n          rewardName\n        } = action.payload;\n        state.rewards.splice(index, 1, rewardName);\n        return state;\n      }\n\n    case types.CHANGE_LADDER_QTY:\n      {\n        const {\n          ladderQty\n        } = action.payload;\n        return _objectSpread({}, state, {\n          ladderQty\n        });\n      }\n\n    case types.CHANGE_NAME:\n      {\n        const {\n          index,\n          playerName\n        } = action.payload;\n        state.players.splice(index, 1, playerName);\n        return state;\n      }\n\n    case types.RESET_ALL:\n      {\n        for (const key in state) {\n          if (Array.isArray(state[key])) {\n            state[key].splice(0, state[key].length);\n          } else {\n            state[key] = initialState[key];\n          }\n        }\n\n        return state;\n      }\n\n    default:\n      {\n        throw new Error();\n      }\n  }\n});","map":{"version":3,"sources":["/Users/chad/Workspace/github/ladder-game/reducers/index.reducer.ts"],"names":["types","initialState","ladderQty","players","rewards","state","action","type","CHANGE_REWARD","index","rewardName","payload","splice","CHANGE_LADDER_QTY","CHANGE_NAME","playerName","RESET_ALL","key","Array","isArray","length","Error"],"mappings":";;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,uBAAvB;AAEA,OAAO,MAAMC,YAAgC,GAAG;AAC5CC,EAAAA,SAAS,EAAE,CADiC;AAE5CC,EAAAA,OAAO,EAAE,EAFmC;AAG5CC,EAAAA,OAAO,EAAE;AAHmC,CAAzC;AAMP,gBAAe,CAACC,KAAD,EAA4BC,MAA5B,KAAqD;AAChE,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKP,KAAK,CAACQ,aAAX;AAA0B;AACtB,cAAM;AAAEC,UAAAA,KAAF;AAASC,UAAAA;AAAT,YAAwBJ,MAAM,CAACK,OAArC;AAEAN,QAAAA,KAAK,CAACD,OAAN,CAAcQ,MAAd,CAAqBH,KAArB,EAA4B,CAA5B,EAA+BC,UAA/B;AAEA,eAAOL,KAAP;AACH;;AAED,SAAKL,KAAK,CAACa,iBAAX;AAA8B;AAC1B,cAAM;AAAEX,UAAAA;AAAF,YAAgBI,MAAM,CAACK,OAA7B;AACA,iCACON,KADP;AAEIH,UAAAA;AAFJ;AAIH;;AAED,SAAKF,KAAK,CAACc,WAAX;AAAwB;AACpB,cAAM;AAAEL,UAAAA,KAAF;AAASM,UAAAA;AAAT,YAAwBT,MAAM,CAACK,OAArC;AAEAN,QAAAA,KAAK,CAACF,OAAN,CAAcS,MAAd,CAAqBH,KAArB,EAA4B,CAA5B,EAA+BM,UAA/B;AAEA,eAAOV,KAAP;AACH;;AAED,SAAKL,KAAK,CAACgB,SAAX;AAAsB;AAClB,aAAK,MAAMC,GAAX,IAAkBZ,KAAlB,EAAyB;AACrB,cAAIa,KAAK,CAACC,OAAN,CAAcd,KAAK,CAACY,GAAD,CAAnB,CAAJ,EAA+B;AAC3BZ,YAAAA,KAAK,CAACY,GAAD,CAAL,CAAWL,MAAX,CAAkB,CAAlB,EAAqBP,KAAK,CAACY,GAAD,CAAL,CAAWG,MAAhC;AACH,WAFD,MAEO;AACHf,YAAAA,KAAK,CAACY,GAAD,CAAL,GAAahB,YAAY,CAACgB,GAAD,CAAzB;AACH;AACJ;;AAED,eAAOZ,KAAP;AACH;;AAED;AAAS;AACL,cAAM,IAAIgB,KAAJ,EAAN;AACH;AAvCL;AAyCH,CA1CD","sourcesContent":["import * as types from '~/reducers/index.type'\n\nexport const initialState: types.InitialState = {\n    ladderQty: 0,\n    players: [],\n    rewards: [],\n}\n\nexport default (state: types.InitialState, action: types.Action) => {\n    switch (action.type) {\n        case types.CHANGE_REWARD: {\n            const { index, rewardName } = action.payload\n\n            state.rewards.splice(index, 1, rewardName)\n\n            return state\n        }\n\n        case types.CHANGE_LADDER_QTY: {\n            const { ladderQty } = action.payload\n            return {\n                ...state,\n                ladderQty,\n            }\n        }\n\n        case types.CHANGE_NAME: {\n            const { index, playerName } = action.payload\n\n            state.players.splice(index, 1, playerName)\n\n            return state\n        }\n\n        case types.RESET_ALL: {\n            for (const key in state) {\n                if (Array.isArray(state[key])) {\n                    state[key].splice(0, state[key].length)\n                } else {\n                    state[key] = initialState[key]\n                }\n            }\n\n            return state\n        }\n\n        default: {\n            throw new Error()\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}