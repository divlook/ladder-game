{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport * as types from '~/reducers/index.type';\nexport const initialState = {\n  ladderQty: 0,\n  players: [],\n  rewards: []\n};\nexport default ((state, action) => {\n  switch (action.type) {\n    case types.CHANGE_REWARD:\n      {\n        const {\n          index,\n          rewardName\n        } = action.payload;\n        state.rewards.splice(index, 1, rewardName);\n        return state;\n      }\n\n    case types.CHANGE_LADDER_QTY:\n      {\n        const {\n          ladderQty\n        } = action.payload;\n        return _objectSpread({}, state, {\n          ladderQty\n        });\n      }\n\n    case types.CHANGE_NAME:\n      {\n        const {\n          index,\n          playerName\n        } = action.payload;\n        state.players.splice(index, 1, playerName);\n        return state;\n      }\n\n    case types.RESET_ALL:\n      {\n        for (const key in state) {\n          if (Array.isArray(state[key])) {\n            state[key].splice(0, state[key].length);\n          } else {\n            state[key] = initialState[key];\n          }\n        }\n\n        return state;\n      }\n\n    default:\n      {\n        throw new Error();\n      }\n  }\n});","map":null,"metadata":{},"sourceType":"module"}