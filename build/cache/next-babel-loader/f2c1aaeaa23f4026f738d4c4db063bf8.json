{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useRef, useEffect } from 'react';\nimport { colors } from '~/components/LadderGame.style';\n\nconst ResultCanvas = props => {\n  const canvasRef = useRef(null);\n  const {\n    width,\n    height,\n    lineIndex,\n    map\n  } = props;\n  useEffect(() => {\n    drawCanvas(lineIndex);\n  }, []);\n  useEffect(() => {\n    drawCanvas(lineIndex);\n  }, [width, height, lineIndex, map]);\n\n  function drawCanvas(lineIndex) {\n    if (!canvasRef.current) return;\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    canvas.width = width;\n    canvas.height = height;\n    if (!ctx) return;\n    const coordinates = [];\n    const color = colors[lineIndex % colors.length];\n    let prevBlockUid = 0;\n    let current = map[lineIndex][0];\n    ctx.lineWidth = 3;\n    ctx.lineJoin = 'round';\n    ctx.strokeStyle = color;\n    ctx.fillStyle = color;\n\n    while (current !== null) {\n      var _current;\n\n      let next = null;\n\n      if (current.nextBlock) {\n        if (coordinates.length === 0) {\n          var _current$el, _current$el2, _current$el3;\n\n          // 시작\n          coordinates.push([(((_current$el = current.el) === null || _current$el === void 0 ? void 0 : _current$el.offsetLeft) || 0) + (((_current$el2 = current.el) === null || _current$el2 === void 0 ? void 0 : _current$el2.offsetWidth) || 0 - ctx.lineWidth) / 2, ((_current$el3 = current.el) === null || _current$el3 === void 0 ? void 0 : _current$el3.offsetTop) || 0]);\n          next = current.nextBlock;\n        } else if (current.linkedBlock) {\n          if (current.isHandle) {\n            var _current$el4, _current$el5, _current$el6, _current$el7;\n\n            coordinates.push([(((_current$el4 = current.el) === null || _current$el4 === void 0 ? void 0 : _current$el4.offsetLeft) || 0) + (((_current$el5 = current.el) === null || _current$el5 === void 0 ? void 0 : _current$el5.offsetWidth) || 0 - ctx.lineWidth) / 2, (((_current$el6 = current.el) === null || _current$el6 === void 0 ? void 0 : _current$el6.offsetTop) || 0) + (((_current$el7 = current.el) === null || _current$el7 === void 0 ? void 0 : _current$el7.offsetHeight) || 0 - ctx.lineWidth) / 2]);\n          }\n\n          if (current.linkedBlock.uid === prevBlockUid) {\n            // midLine 이동 후\n            next = current.nextBlock;\n          } else {\n            // midLine 이동 전\n            next = current.linkedBlock;\n          }\n        } else {\n          // 일반 block\n          next = current.nextBlock;\n        }\n      } else {\n        var _current$el8, _current$el9, _current$el10, _current$el11;\n\n        // 끝\n        coordinates.push([(((_current$el8 = current.el) === null || _current$el8 === void 0 ? void 0 : _current$el8.offsetLeft) || 0) + (((_current$el9 = current.el) === null || _current$el9 === void 0 ? void 0 : _current$el9.offsetWidth) || 0 - ctx.lineWidth) / 2, (((_current$el10 = current.el) === null || _current$el10 === void 0 ? void 0 : _current$el10.offsetTop) || 0) + (((_current$el11 = current.el) === null || _current$el11 === void 0 ? void 0 : _current$el11.offsetHeight) || 0)]);\n      }\n\n      prevBlockUid = ((_current = current) === null || _current === void 0 ? void 0 : _current.uid) || 0;\n      current = next;\n    }\n\n    for (let index = 0, len = coordinates.length; index < len; index++) {\n      const xy = coordinates[index];\n\n      if (index === 0) {\n        ctx.beginPath();\n        ctx.arc(xy[0], xy[1] - 8, 6, 0, Math.PI * 2);\n        ctx.closePath();\n        ctx.fill();\n        ctx.beginPath();\n        ctx.moveTo(xy[0], xy[1] - 3);\n        ctx.lineTo(...xy);\n      } else {\n        ctx.lineTo(...xy);\n      }\n\n      if (index === len - 1) {\n        ctx.lineTo(xy[0], xy[1] + 3);\n        ctx.stroke();\n        ctx.beginPath();\n        ctx.arc(xy[0], xy[1] + 8, 6, 0, Math.PI * 2);\n        ctx.closePath();\n        ctx.fill();\n      }\n    }\n  }\n\n  return __jsx(\"canvas\", {\n    ref: canvasRef,\n    width: width,\n    height: height\n  });\n};\n\nexport default ResultCanvas;","map":null,"metadata":{},"sourceType":"module"}