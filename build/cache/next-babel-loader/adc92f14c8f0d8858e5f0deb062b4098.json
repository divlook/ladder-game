{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _Array$isArray from \"@babel/runtime-corejs2/core-js/array/is-array\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport * as types from '~/reducers/index.type';\nexport var initialState = {\n  ladderQty: 0,\n  players: [],\n  rewards: []\n};\nexport default (function (state, action) {\n  switch (action.type) {\n    case types.CHANGE_REWARD:\n      {\n        var _action$payload = action.payload,\n            index = _action$payload.index,\n            rewardName = _action$payload.rewardName;\n        state.rewards.splice(index, 1, rewardName);\n        return state;\n      }\n\n    case types.CHANGE_LADDER_QTY:\n      {\n        var ladderQty = action.payload.ladderQty;\n        return _objectSpread({}, state, {\n          ladderQty: ladderQty\n        });\n      }\n\n    case types.CHANGE_NAME:\n      {\n        var _action$payload2 = action.payload,\n            _index = _action$payload2.index,\n            playerName = _action$payload2.playerName;\n        state.players.splice(_index, 1, playerName);\n        return state;\n      }\n\n    case types.RESET_ALL:\n      {\n        for (var key in state) {\n          if (_Array$isArray(state[key])) {\n            state[key].splice(0, state[key].length);\n          } else {\n            state[key] = initialState[key];\n          }\n        }\n\n        return state;\n      }\n\n    default:\n      {\n        throw new Error();\n      }\n  }\n});","map":null,"metadata":{},"sourceType":"module"}