{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState, useReducer, useEffect, useRef } from 'react';\nimport Typography from '@material-ui/core/Typography';\nimport Stepper from '@material-ui/core/Stepper';\nimport Step from '@material-ui/core/Step';\nimport StepLabel from '@material-ui/core/StepLabel';\nimport StepContent from '@material-ui/core/StepContent';\nimport DefaultLayout from '~/layouts/DefaultLayout';\nimport Button from '@material-ui/core/Button';\nimport Paper from '@material-ui/core/Paper';\nimport TextField from '@material-ui/core/TextField';\nimport Box from '@material-ui/core/Box';\nimport { makeStyles } from '@material-ui/core';\nimport IndexReducer, { initialState } from '~/reducers/index.reducer';\nimport * as IndexAction from '~/reducers/index.action';\nimport LadderGame from '~/components/LadderGame';\nexport const useStyles = makeStyles(theme => ({\n  root: {\n    width: '100%'\n  },\n  textField: {\n    marginRight: theme.spacing(1),\n    '&:last-child': {\n      marginRight: theme.spacing(0)\n    }\n  },\n  button: {\n    marginTop: theme.spacing(1),\n    marginRight: theme.spacing(1),\n    '&:last-child': {\n      marginRight: theme.spacing(0)\n    }\n  },\n  actionsContainer: {\n    marginBottom: theme.spacing(2)\n  },\n  resetContainer: {\n    padding: theme.spacing(3)\n  }\n}));\n\nconst IndexPage = () => {\n  const classes = useStyles();\n  const steps = ['몇 개의 사다리가 필요하신가요?', '이름을 입력해주세요.', '보상을 입력해주세요.'];\n  const {\n    0: activeStep,\n    1: setActiveStep\n  } = useState(0);\n  const {\n    0: store,\n    1: dispatch\n  } = useReducer(IndexReducer, initialState);\n  const formRef = useRef(null);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n  };\n\n  const handleNext = () => {\n    setActiveStep(prevActiveStep => prevActiveStep + 1);\n  };\n\n  const handleBack = () => {\n    setActiveStep(prevActiveStep => prevActiveStep - 1);\n  };\n\n  const handleReset = () => {\n    var _formRef$current;\n\n    setActiveStep(0);\n    dispatch(IndexAction.resetAll());\n    (_formRef$current = formRef.current) === null || _formRef$current === void 0 ? void 0 : _formRef$current.reset();\n  };\n\n  const changeLadderQty = e => {\n    var _e$target, _e$target2;\n\n    if (Number(e === null || e === void 0 ? void 0 : (_e$target = e.target) === null || _e$target === void 0 ? void 0 : _e$target.value) > 20) e.target.value = 20;\n    dispatch(IndexAction.changeLadderQty(Number(e === null || e === void 0 ? void 0 : (_e$target2 = e.target) === null || _e$target2 === void 0 ? void 0 : _e$target2.value)));\n  };\n\n  const changeName = index => e => {\n    var _e$target3;\n\n    dispatch(IndexAction.changeName(index, e === null || e === void 0 ? void 0 : (_e$target3 = e.target) === null || _e$target3 === void 0 ? void 0 : _e$target3.value));\n  };\n\n  const changeReward = index => e => {\n    var _e$target4;\n\n    dispatch(IndexAction.changeReward(index, e === null || e === void 0 ? void 0 : (_e$target4 = e.target) === null || _e$target4 === void 0 ? void 0 : _e$target4.value));\n  };\n\n  useEffect(() => {\n    console.log(store);\n  }, [store]);\n  return __jsx(DefaultLayout, null, __jsx(Typography, {\n    component: \"h1\",\n    variant: \"h4\",\n    align: \"center\"\n  }, \"\\uD83D\\uDC4B \\uC548\\uB155\\uD558\\uC138\\uC694!\"), __jsx(\"form\", {\n    ref: formRef,\n    className: classes.root,\n    noValidate: true,\n    autoComplete: \"off\",\n    onSubmit: handleSubmit\n  }, __jsx(Stepper, {\n    activeStep: activeStep,\n    orientation: \"vertical\"\n  }, steps.map((label, currentStep) => {\n    let isError = false;\n    return __jsx(Step, {\n      key: label\n    }, __jsx(StepLabel, null, label), __jsx(StepContent, null, (() => {\n      switch (currentStep) {\n        case 0:\n          {\n            isError = !store.ladderQty || store.ladderQty <= 1 || store.ladderQty > 20;\n            return __jsx(TextField, {\n              className: classes.textField,\n              type: \"number\",\n              label: isError ? '숫자 2이상 20이하' : '',\n              error: isError,\n              onChange: changeLadderQty,\n              defaultValue: !isError && store.ladderQty || ''\n            });\n          }\n\n        case 1:\n          {\n            return __jsx(React.Fragment, null, Array.from({\n              length: store.ladderQty\n            }).map((row, key) => {\n              return __jsx(TextField, {\n                key: key,\n                className: classes.textField,\n                onChange: changeName(key),\n                defaultValue: store.players[key] || ''\n              });\n            }));\n          }\n\n        case 2:\n          {\n            return __jsx(React.Fragment, null, Array.from({\n              length: store.ladderQty\n            }).map((row, key) => {\n              return __jsx(TextField, {\n                key: key,\n                className: classes.textField,\n                onChange: changeReward(key),\n                defaultValue: store.rewards[key] || ''\n              });\n            }));\n          }\n\n        default:\n          return null;\n      }\n    })(), __jsx(Box, {\n      className: classes.actionsContainer\n    }, __jsx(Box, null, __jsx(Button, {\n      disabled: currentStep === 0,\n      onClick: handleBack,\n      className: classes.button\n    }, \"Back\"), __jsx(Button, {\n      variant: \"contained\",\n      color: \"primary\",\n      onClick: handleNext,\n      className: classes.button,\n      disabled: isError\n    }, \"Next\")))));\n  }))), activeStep === steps.length && __jsx(Paper, {\n    square: true,\n    elevation: 0,\n    className: classes.resetContainer\n  }, __jsx(Box, null, __jsx(LadderGame, store)), __jsx(Box, null, __jsx(Button, {\n    disabled: activeStep === 0,\n    onClick: handleBack,\n    className: classes.button\n  }, \"Back\"), __jsx(Button, {\n    onClick: handleReset,\n    className: classes.button\n  }, \"Reset\"))));\n};\n\nIndexPage.displayName = \"IndexPage\";\nexport default IndexPage;","map":{"version":3,"sources":["/Users/chad/Workspace/github/ladder-game/pages/index.tsx"],"names":["React","useState","useReducer","useEffect","useRef","Typography","Stepper","Step","StepLabel","StepContent","DefaultLayout","Button","Paper","TextField","Box","makeStyles","IndexReducer","initialState","IndexAction","LadderGame","useStyles","theme","root","width","textField","marginRight","spacing","button","marginTop","actionsContainer","marginBottom","resetContainer","padding","IndexPage","classes","steps","activeStep","setActiveStep","store","dispatch","formRef","handleSubmit","e","preventDefault","handleNext","prevActiveStep","handleBack","handleReset","resetAll","current","reset","changeLadderQty","Number","target","value","changeName","index","changeReward","console","log","map","label","currentStep","isError","ladderQty","Array","from","length","row","key","players","rewards"],"mappings":"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","sourcesContent":["import React, { useState, useReducer, useEffect, useRef } from 'react'\nimport { NextPage } from 'next'\nimport Typography from '@material-ui/core/Typography'\nimport Stepper from '@material-ui/core/Stepper'\nimport Step from '@material-ui/core/Step'\nimport StepLabel from '@material-ui/core/StepLabel'\nimport StepContent from '@material-ui/core/StepContent'\nimport DefaultLayout from '~/layouts/DefaultLayout'\nimport Button from '@material-ui/core/Button'\nimport Paper from '@material-ui/core/Paper'\nimport TextField from '@material-ui/core/TextField'\nimport Box from '@material-ui/core/Box'\nimport { makeStyles } from '@material-ui/core'\nimport IndexReducer, { initialState } from '~/reducers/index.reducer'\nimport * as IndexAction from '~/reducers/index.action'\nimport LadderGame from '~/components/LadderGame'\n\nexport const useStyles = makeStyles(theme => ({\n    root: {\n        width: '100%',\n    },\n    textField: {\n        marginRight: theme.spacing(1),\n        '&:last-child': {\n            marginRight: theme.spacing(0),\n        },\n    },\n    button: {\n        marginTop: theme.spacing(1),\n        marginRight: theme.spacing(1),\n        '&:last-child': {\n            marginRight: theme.spacing(0),\n        },\n    },\n    actionsContainer: {\n        marginBottom: theme.spacing(2),\n    },\n    resetContainer: {\n        padding: theme.spacing(3),\n    },\n}))\n\nconst IndexPage: NextPage = () => {\n    const classes = useStyles()\n    const steps = ['몇 개의 사다리가 필요하신가요?', '이름을 입력해주세요.', '보상을 입력해주세요.']\n    const [activeStep, setActiveStep] = useState(0)\n    const [store, dispatch] = useReducer(IndexReducer, initialState)\n    const formRef = useRef<HTMLFormElement>(null)\n\n    const handleSubmit = e => {\n        e.preventDefault()\n    }\n\n    const handleNext = () => {\n        setActiveStep(prevActiveStep => prevActiveStep + 1)\n    }\n\n    const handleBack = () => {\n        setActiveStep(prevActiveStep => prevActiveStep - 1)\n    }\n\n    const handleReset = () => {\n        setActiveStep(0)\n        dispatch(IndexAction.resetAll())\n        formRef.current?.reset()\n    }\n\n    const changeLadderQty = e => {\n        if (Number(e?.target?.value) > 20) e.target.value = 20\n        dispatch(IndexAction.changeLadderQty(Number(e?.target?.value)))\n    }\n\n    const changeName = index => e => {\n        dispatch(IndexAction.changeName(index, e?.target?.value))\n    }\n\n    const changeReward = index => e => {\n        dispatch(IndexAction.changeReward(index, e?.target?.value))\n    }\n\n    useEffect(() => {\n        console.log(store)\n    }, [store])\n\n    return (\n        <DefaultLayout>\n            <Typography component=\"h1\" variant=\"h4\" align=\"center\">\n                👋 안녕하세요!\n            </Typography>\n\n            <form ref={formRef} className={classes.root} noValidate autoComplete=\"off\" onSubmit={handleSubmit}>\n                <Stepper activeStep={activeStep} orientation=\"vertical\">\n                    {steps.map((label, currentStep) => {\n                        let isError = false\n\n                        return (\n                            <Step key={label}>\n                                <StepLabel>{label}</StepLabel>\n                                <StepContent>\n                                    {(() => {\n                                        switch (currentStep) {\n                                            case 0: {\n                                                isError = !store.ladderQty || store.ladderQty <= 1 || store.ladderQty > 20\n                                                return (\n                                                    <TextField\n                                                        className={classes.textField}\n                                                        type=\"number\"\n                                                        label={isError ? '숫자 2이상 20이하' : ''}\n                                                        error={isError}\n                                                        onChange={changeLadderQty}\n                                                        defaultValue={(!isError && store.ladderQty) || ''}\n                                                    />\n                                                )\n                                            }\n\n                                            case 1: {\n                                                return (\n                                                    <React.Fragment>\n                                                        {Array.from({ length: store.ladderQty }).map((row, key) => {\n                                                            return (\n                                                                <TextField\n                                                                    key={key}\n                                                                    className={classes.textField}\n                                                                    onChange={changeName(key)}\n                                                                    defaultValue={store.players[key] || ''}\n                                                                />\n                                                            )\n                                                        })}\n                                                    </React.Fragment>\n                                                )\n                                            }\n\n                                            case 2: {\n                                                return (\n                                                    <React.Fragment>\n                                                        {Array.from({ length: store.ladderQty }).map((row, key) => {\n                                                            return (\n                                                                <TextField\n                                                                    key={key}\n                                                                    className={classes.textField}\n                                                                    onChange={changeReward(key)}\n                                                                    defaultValue={store.rewards[key] || ''}\n                                                                />\n                                                            )\n                                                        })}\n                                                    </React.Fragment>\n                                                )\n                                            }\n\n                                            default:\n                                                return null\n                                        }\n                                    })()}\n\n                                    <Box className={classes.actionsContainer}>\n                                        <Box>\n                                            <Button disabled={currentStep === 0} onClick={handleBack} className={classes.button}>\n                                                Back\n                                            </Button>\n                                            <Button\n                                                variant=\"contained\"\n                                                color=\"primary\"\n                                                onClick={handleNext}\n                                                className={classes.button}\n                                                disabled={isError}\n                                            >\n                                                Next\n                                            </Button>\n                                        </Box>\n                                    </Box>\n                                </StepContent>\n                            </Step>\n                        )\n                    })}\n                </Stepper>\n            </form>\n\n            {activeStep === steps.length && (\n                <Paper square elevation={0} className={classes.resetContainer}>\n                    <Box>\n                        <LadderGame {...store} />\n                    </Box>\n                    <Box>\n                        <Button disabled={activeStep === 0} onClick={handleBack} className={classes.button}>\n                            Back\n                        </Button>\n                        <Button onClick={handleReset} className={classes.button}>\n                            Reset\n                        </Button>\n                    </Box>\n                </Paper>\n            )}\n        </DefaultLayout>\n    )\n}\n\nexport default IndexPage\n"]},"metadata":{},"sourceType":"module"}